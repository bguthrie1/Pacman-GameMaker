<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Packman_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>PackmanObj</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = 180
image_speed = .25;
frame = 0;
speed = 0;
maxspeed = 1;
ChangeDirection = 0
alarm[0] = 1;

lasttile = instance_nearest(x,y,TileObj);
//path
path = path_add();
//path is shapr corners (a straight line anyway here)
path_set_kind(path,0);
//path is not closed
path_set_closed(path,0);
endt = noone;
//default script
//if(!current_script)
current_script = DemoPackmanMove;
flipcount =0;

instance_create(0,0,GhostsSpawnObj);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_delete(path);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atepellet = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(PausedObj)) alarm[0] = 1;
else script_execute(current_script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//fix for wondering eyes
direction = round(direction/90) * 90


//if packman is moving, decide the animation sequence in the subframes
if(path_speed&gt;0)
    frame = ((direction/360) * 8) + 1;

/*    
if (atepellet = 0)
maxspeed = PacSpeed;
else
maxspeed = PacDotsSpeed;*/
maxspeed = PacSpeed;

//this animates at .25 when speed is not 0
//0 image speed when speed is 0
image_speed = .25 * (path_speed&gt;0);

AnimatePart(frame,(frame&gt;0) *2)
//(frame&gt;0) *2 passes 0 or 2, if first frame, the start circle, pass 0, 
//else, pass 2, this is a quick was to decide between o and 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(PausedObj)) exit;

// This code checks to see if Pacman ate a pellet, then keeps his dot speed for 10 steps before he returns to his normal speed.
if (atepellet = 0)
{
SpeedNow = PacSpeed;
}
else if (atepellet = 1 and alarm[1] &lt;= 0)
{
SpeedNow = PacDotsSpeed;
alarm[1] = 10;
}


//Pellets
with(instance_nearest(x-6,y-6,PelletObj))
{
    if(point_distance(x,y,other.x-6,other.y-6) &lt; 8)
    {
        score +=10;
        audio_play_sound(Pellet_snd, 0, false);
        instance_destroy();
        atepellet = 1;
        SpeedNow = PacDotsSpeed;
        
        if (GhostCountersDisabled = 0)
        {
            if (!PinkyLeftHouse)
            PinkyDotCounter +=1;
            else if (PinkyLeftHouse and !InkyLeftHouse)
            InkyDotCounter +=1;
            else if (InkyLeftHouse and !ClydeLeftHouse)
            ClydeDotCounter +=1;
        }
        else
        GlobalDotCounter +=1;
    }
}
//Pills
with(instance_nearest(x-6,y-6,PillObj))
{
    if(point_distance(x,y,other.x-6,other.y-6) &lt; 8)
    {
        score +=50;
        BlueGhostScore = 200;
        audio_play_sound(Pellet_snd, 0, false);
        instance_destroy();
        
        with(ParentGhostObj) 
        {
            if(FrightTime)
            {
                if(object_index != BlueGhostObj and object_index != GhostEyesObj)
                {
                    WhatIDid = current_script;
                    WhoIWas = object_index;
                    if(object_index != GhostEyesObj) 
                    {      
                        GhostFlipDirection()                  
                        instance_change(BlueGhostObj,true);
                    }
                }
                else if (object_index = BlueGhostObj)
                {
                    GhostFlipDirection()
                    event_perform(ev_create, 0);
                    sprite_index = BlueGhost_spr
                }
            }
            else
            {
                if(object_index != BlueGhostObj and object_index != GhostEyesObj)
                    GhostFlipDirection();
            }
        }
        atepellet = 1;
        SpeedNow = PacDotsSpeed;
    }
}

//other confusion galore, simpler to use var
var pacid; pacid = id;
//Ghosts
var pt,xx,yy; 
pt = 0;
with(instance_nearest(x,y,ParentGhostObj))
{
    if(point_distance(x,y,pacid.x,pacid.y) &lt; 8)
    {
        if(object_index == BlinkyObj or object_index == InkyObj
        or object_index == PinkyObj or object_index == ClydeObj)
        {
            instance_create(pacid.x,pacid.y,PauseAndDieObj);
            with(LevelInfoObj)
            alarm[0] = -1; // Stop the dot timer
        }
        //blue ghost
        else if(object_index == BlueGhostObj)
        {
            pt = BlueGhostScore;
            //add points
            score += pt;
            //double it for next time
            BlueGhostScore *=2;
            BlueGhostScore  = min(1600,BlueGhostScore );
            audio_play_sound(EatBlueGhost_snd, 0, false);
            
            //pacid.x -= pacid.hspeed * (1-0);
            //pacid.y -= pacid.vspeed * (1-0);
            with(instance_create(x,y,GhostEyesObj))
            {
                WhoIWas = other.WhoIWas;
                xstart = other.xstart;
                ystart = other.ystart;
                HomeTile = collision_point(other.xstart,other.ystart,TileObj,0,0);
            }
            xx = x;
            yy = y;
            instance_destroy();
        }
    }
}

            //show the points, paused
if(pt)
    with(instance_create(xx,yy,PointOnSpotPausedObj))
    {
        points = pt;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(PausedObj)) alarm[0] = 1;
else script_execute(current_script);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,11</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
