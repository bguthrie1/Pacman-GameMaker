<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>GreenGhost_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>PackmanObj</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_set_map(ord('W'),vk_up);
keyboard_set_map(ord('A'),vk_left);
keyboard_set_map(ord('S'),vk_down);
keyboard_set_map(ord('D'),vk_right);

random_set_seed(66);

image_speed = .25;
frame = 0;
dir = 2;
maxspeed = 1;
lasttile = noone;
SpeedNow = 0;

BlueScore =200;
//hspeed = -maxspeed;
instance_create(0,0,GhostsSpawnObj); // Used to initialize some variables the ghosts use.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if packman is moving, decide the animation sequence in the subframes
if(speed&gt;0)
{
    frame = (direction/360) * 8;
}


frame = (direction/360) * 8;
//all animation have 2 frames, each animation is at 0,2,4,6 
AnimatePart(frame,2)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message(string(instance_number(PausedObj)))
if(instance_exists(PausedObj)) exit;


SpeedNow = PacSpeed;

//what direction is asked
hs = (keyboard_check_pressed(vk_right) - keyboard_check_pressed(vk_left));
vs = (keyboard_check_pressed(vk_down) - keyboard_check_pressed(vk_up));

if(hs == 0 and vs == 0)
{
    hs = (keyboard_check(vk_right) - keyboard_check(vk_left));
    vs = (keyboard_check(vk_down) - keyboard_check(vk_up));
}


//OK, so did player have a key down, hs or vs is set to -1 or 1m not 0
    
    
    //round((x-6)/12)+6+hs*12,round((y-6)/12)+6+vs*12,10)
        //ShowXY(round((x-6)/12)*12+6+hs*12,round((y-6)/12)*12+6+vs*12,10);
if(abs(hs) != abs(vs))
{
    //get the direction in 0,1,2,3 format
    var newdir; newdir = floor(point_direction(0,0,hs,vs)/90); 
    //compare with old direction, detect change in direction
    if(newdir &lt;&gt; dir)
    {
        //look at desired location, to the next tile (hs*12, vs *12) does the offset
        tile = collision_point(round((x-6)/12)*12+6+hs*12,round((y-6)/12)*12+6+vs*12,TileObj,0,0);
        if(tile!=noone)
        {
            if(tile.PacDirs[newdir] == 1)
            {
                //there is a tile
                //remember new direction
                dir = newdir;
                //set the movement to speed
                hspeed = hs*SpeedNow;
                vspeed = vs*SpeedNow; 
            }
        }
    }
}

//go to center of the road on x when updown, on y when left right
//what tile are we on (closest)
tileon = collision_point(round((x-6)/12)*12+6,round((y-6)/12)*12+6,TileObj,0,0);
if(tileon != noone) lasttile = tileon;
if(lasttile != noone)
{
    //if left right movement
    if(dir == 0 or dir == 2)
    {
        //smooth move to tile axis
        dif = lasttile.y + 6 - y;
        y+=min(SpeedNow,abs(dif)) * sign(dif)
        //or instant like the real game
        //y = lasttile.y + 6
    }
    else //up down
    {
        //smooth move to tile axis
        dif = lasttile.x + 6 - x;
        x+=min(SpeedNow,abs(dif)) * sign(dif)
        //or instant like the real game
        //x = lasttile.x + 6
    }
}
//finaly, stop if no tile in the moving direction
//if(speed&gt;0)
{
//this animates at .25 when speed is not 0
//0 image speed when speed is 0
    image_speed = .25 * (speed&gt;0);

    //position to look at,
    xx = round(x)+sign(hspeed) * 10;// floor((x-6)/12)*12+6+sign(hspeed) * 7;
    yy = round(y)+sign(vspeed) * 10;//floor((y-6)/12)*12+6+sign(vspeed) * 7;
    //ShowXY(xx,yy,10)
    //with(lasttile) 
    //{
    //x -= 1000000
    //}
    //xx = (x/12)*12+sign(hspeed) * 13;
    //yy = (y/12)*12+sign(vspeed) * 13;
    if(!collision_circle(xx,yy,3,TileObj,0,0)) 
    {
        //speed = 0;
        if(tileon )
        {
            x = tileon.x+6;
            y = tileon.y+6;
            //this animates at .25 when speed is not 0
            //0 image speed when speed is 0
//            image_speed = 0;

        }
    }
    //with(lasttile) 
    //{
    //x += 1000000;
    //}
}



   
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,11</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
